/**
 *  This file is part of spreadit-backend. Copyright (C) 2020 eggze Technik GmbH
 *
 * spreadit-backend is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * spreadit-backend is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.eggze.spreadit.common.packet.client.scans;

import com.eggze.spreadit.common.packet.client.ClientPacketIF;

/**
 * An interface describing the client packet where the client acknowledges
 * reception of dates of scans that have contacts. A DatesReceivedPacket from
 * the client indicate to the ScanManager to update scans with the provided
 * timestamp as sent, and stop sending these to the client.
 * 
 * If the number of contacts for any of these scans changes due to a future
 * periodic update, these scans will be marked (timestamp removed, sent flag
 * removed) for resending.
 * 
 * Failure to receive this packet from the client will not mark those scans
 * as sent, and as such, they will be sent again when the next ReqDatesPacket
 * is received.
 * 
 * This is the third step in the following packet chain
 * 
 * Client                                        Server
 * ----------------------------------------------------
 * ReqDatesPacket          ->
 *                         <-           SendDatesPacket
 * DatesReceivedPacket     ->
 *                         <-     DatesReceivedOKPacket
 * 
 * 
 * @author K. Dermitzakis <kde at eggze.com>
 * @version 0.1
 * @since 0.1
 */
public interface DatesReceivedPacketIF extends ClientPacketIF{

    /**
     * Get the timestamp of when scan dates with contacts were requested. The
     * timestamp is generated by the ScanManager upon request of scan dates with
     * contacts, if any.
     * 
     * @return the timestamp of when scan dates with contacts were requested
     */
    public long getRequestedTimestamp();
    
    /**
     * Set the timestamp of when scan dates with contacts were requested. The
     * timestamp is generated by the ScanManager upon request of scan dates with
     * contacts, if any.
     * 
     * @param requestedTimestamp the timestamp of when scan dates with contacts
     * were requested
     * 
     */
    public void setRequestedTimestamp(long requestedTimestamp);
}
